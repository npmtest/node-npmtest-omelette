{"/home/travis/build/npmtest/node-npmtest-omelette/test.js":"/* istanbul instrument in package npmtest_omelette */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-omelette/lib.npmtest_omelette.js":"/* istanbul instrument in package npmtest_omelette */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_omelette = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_omelette = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-omelette/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-omelette && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_omelette */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_omelette\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_omelette.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_omelette.rollup.js'] =\n            local.assetsDict['/assets.npmtest_omelette.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_omelette.__dirname +\n                    '/lib.npmtest_omelette.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-omelette/node_modules/omelette/src/omelette.js":"// Generated by CoffeeScript 1.12.3\n\n/*\n * Omelette Simple Auto Completion for Node\n */\n\n(function() {\n  var EventEmitter, Omelette, fs, os, path,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty,\n    slice = [].slice;\n\n  EventEmitter = require(\"events\").EventEmitter;\n\n  path = require(\"path\");\n\n  fs = require(\"fs\");\n\n  os = require(\"os\");\n\n  Omelette = (function(superClass) {\n    var log;\n\n    extend(Omelette, superClass);\n\n    log = console.log;\n\n    function Omelette() {\n      var isZsh, ref;\n      this.compgen = process.argv.indexOf(\"--compgen\");\n      this.install = process.argv.indexOf(\"--completion\") > -1;\n      this.installFish = process.argv.indexOf(\"--completion-fish\") > -1;\n      isZsh = process.argv.indexOf(\"--compzsh\") > -1;\n      this.isDebug = process.argv.indexOf(\"--debug\") > -1;\n      this.fragment = parseInt(process.argv[this.compgen + 1]) - (isZsh ? 1 : 0);\n      this.word = process.argv[this.compgen + 2];\n      this.line = process.argv[this.compgen + 3];\n      ref = process.env, this.HOME = ref.HOME, this.SHELL = ref.SHELL;\n    }\n\n    Omelette.prototype.setProgram = function(programs) {\n      programs = programs.split('|');\n      this.program = programs[0];\n      return this.programs = programs.map(function(program) {\n        return program.replace(/[^A-Za-z0-9\\.\\_\\-]/g, '');\n      });\n    };\n\n    Omelette.prototype.setFragments = function() {\n      var fragments1;\n      fragments1 = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      this.fragments = fragments1;\n    };\n\n    Omelette.prototype.generate = function() {\n      this.emit(\"complete\", this.fragments[this.fragment - 1], this.word, this.line);\n      this.emit(this.fragments[this.fragment - 1], this.word, this.line);\n      this.emit(\"$\" + this.fragment, this.word, this.line);\n      return process.exit();\n    };\n\n    Omelette.prototype.reply = function(words) {\n      if (words == null) {\n        words = [];\n      }\n      console.log(words.join(\"\\n\"));\n      return process.exit();\n    };\n\n    Omelette.prototype.generateCompletionCode = function() {\n      var completions;\n      completions = this.programs.map((function(_this) {\n        return function(program) {\n          var completion;\n          completion = \"_\" + program + \"_complette\";\n          return \"### \" + program + \" completion - begin. generated by omelette.js ###\\nif type compdef &>/dev/null; then\\n  \" + completion + \"() {\\n    compadd -- `\" + _this.program + \" --compzsh --compgen \\\"${CURRENT}\\\" \\\"${words[CURRENT-1]}\\\" \\\"${BUFFER}\\\"`\\n  }\\n  compdef \" + completion + \" \" + program + \"\\nelif type complete &>/dev/null; then\\n  \" + completion + \"() {\\n    COMPREPLY=( $(compgen -W '$(\" + _this.program + \" --compbash --compgen \\\"${COMP_CWORD}\\\" \\\"${COMP_WORDS[COMP_CWORD-1]}\\\" \\\"${COMP_LINE}\\\")' -- \\\"${COMP_WORDS[COMP_CWORD]}\\\") )\\n  }\\n  complete -F \" + completion + \" \" + program + \"\\nfi\\n### \" + program + \" completion - end ###\";\n        };\n      })(this));\n      if (this.isDebug) {\n        completions.push(this.generateTestAliases());\n      }\n      return completions.join(os.EOL);\n    };\n\n    Omelette.prototype.generateCompletionCodeFish = function() {\n      var completions;\n      completions = this.programs.map((function(_this) {\n        return function(program) {\n          var completion;\n          completion = \"_\" + program + \"_complette\";\n          return \"### \" + program + \" completion - begin. generated by omelette.js ###\\nfunction \" + completion + \"\\n  \" + _this.program + \" --compfish --compgen (count (commandline -poc)) (commandline -pt) (commandline -pb)\\nend\\ncomplete -f -c \" + program + \" -a '(\" + completion + \")'\\n### \" + program + \" completion - end ###\";\n        };\n      })(this));\n      if (this.isDebug) {\n        completions.push(this.generateTestAliases());\n      }\n      return completions.join(os.EOL);\n    };\n\n    Omelette.prototype.generateTestAliases = function() {\n      var debugAliases, debugUnaliases, fullPath;\n      fullPath = path.join(process.cwd(), this.program);\n      debugAliases = this.programs.map(function(program) {\n        return \"  alias \" + program + \"=\" + fullPath;\n      }).join(os.EOL);\n      debugUnaliases = this.programs.map(function(program) {\n        return \"  unalias \" + program;\n      }).join(os.EOL);\n      return \"### test method ###\\nomelette-debug-\" + this.program + \"() {\\n\" + debugAliases + \"\\n}\\nomelette-nodebug-\" + this.program + \"() {\\n\" + debugUnaliases + \"\\n}\\n### tests ###\";\n    };\n\n    Omelette.prototype.checkInstall = function() {\n      if (this.install) {\n        log(this.generateCompletionCode());\n        process.exit();\n      }\n      if (this.installFish) {\n        log(this.generateCompletionCodeFish());\n        return process.exit();\n      }\n    };\n\n    Omelette.prototype.getActiveShell = function() {\n      var SHELL;\n      SHELL = process.env.SHELL;\n      if (SHELL.match(/bash/)) {\n        return 'bash';\n      } else if (SHELL.match(/zsh/)) {\n        return 'zsh';\n      } else if (SHELL.match(/fish/)) {\n        return 'fish';\n      }\n    };\n\n    Omelette.prototype.getDefaultShellInitFile = function() {\n      var fileAt, fileAtHome;\n      fileAt = function(root) {\n        return function(file) {\n          return path.join(root, file);\n        };\n      };\n      fileAtHome = fileAt(this.HOME);\n      switch (this.shell = this.getActiveShell()) {\n        case 'bash':\n          return fileAtHome('.bash_profile');\n        case 'zsh':\n          return fileAtHome('.zshrc');\n        case 'fish':\n          return fileAtHome('.config/fish/config.fish');\n      }\n    };\n\n    Omelette.prototype.setupShellInitFile = function(initFile) {\n      var completionPath, programFolder, template;\n      if (initFile == null) {\n        initFile = this.getDefaultShellInitFile();\n      }\n      template = (function(_this) {\n        return function(command) {\n          return \"\\n# begin \" + _this.program + \" completion\\n\" + command + \"\\n# end \" + _this.program + \" completion\\n\";\n        };\n      })(this);\n      switch (this.shell) {\n        case 'bash':\n          programFolder = path.join(this.HOME, \".\" + this.program);\n          completionPath = path.join(programFolder, 'completion.sh');\n          if (!fs.existsSync(programFolder)) {\n            fs.mkdirSync(programFolder);\n          }\n          fs.writeFileSync(completionPath, this.generateCompletionCode());\n          fs.appendFileSync(initFile, template(\"source \" + completionPath));\n          break;\n        case 'zsh':\n          fs.appendFileSync(initFile, template(\". <(\" + this.program + \" --completion)\"));\n          break;\n        case 'fish':\n          fs.appendFileSync(initFile, template(this.program + \" --completion-fish | source\"));\n      }\n      return process.exit();\n    };\n\n    Omelette.prototype.init = function() {\n      if (this.compgen > -1) {\n        return this.generate();\n      }\n    };\n\n    return Omelette;\n\n  })(EventEmitter);\n\n  module.exports = function(template) {\n    var _omelette, fragments, program, ref;\n    ref = template.split(/\\s+/), program = ref[0], fragments = 2 <= ref.length ? slice.call(ref, 1) : [];\n    fragments = fragments.map(function(fragment) {\n      return fragment.replace(/^\\<+|\\>+$/g, '');\n    });\n    _omelette = new Omelette;\n    _omelette.setProgram(program);\n    _omelette.setFragments.apply(_omelette, fragments);\n    _omelette.checkInstall();\n    return _omelette;\n  };\n\n}).call(this);\n"}